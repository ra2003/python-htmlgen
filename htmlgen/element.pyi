import typing
from typing import \
    Any, AnyStr, Mapping, Union, TypeVar, Set, Optional

from htmlgen.generator import Generator, HTMLChildGenerator

T = TypeVar("T")

def is_element(o: Any, element_name: str) -> bool: ...

class _ElementBase(Generator):
    id = ...  # type: Optional[str]
    element_name = ...  # type: str
    data = ...  # type: Mapping[str, str]
    def __init__(self, element_name: str) -> None: ...
    def set_attribute(self, name: str, value: str) -> None: ...
    def get_attribute(self, name: str, default: T = ...) -> Union[str, T]: ...
    def remove_attribute(self, name: str) -> None: ...
    @property
    def attribute_names(self) -> Set[str]: ...
    def add_css_classes(self, *css_classes: str) -> None: ...
    def remove_css_classes(self, *css_classes: str) -> None: ...
    def has_css_class(self, css_class: str) -> bool: ...
    def set_style(self, name: str, value: str) -> None: ...
    def render_start_tag(self) -> str: ...

class NonVoidElement(_ElementBase):
    def generate_children(self) -> typing.Generator[Union[AnyStr, Generator], None, None]: ...

class Element(NonVoidElement):
    children = ...  # type: HTMLChildGenerator
    def __init__(self, element_name: str) -> None: ...
    def __bool__(self) -> bool: ...
    def __getattr__(self, item: Any) -> Any: ...
    def __len__(self) -> int: ...
    def __nonzero__(self) -> bool: ...

class VoidElement(_ElementBase): ...
